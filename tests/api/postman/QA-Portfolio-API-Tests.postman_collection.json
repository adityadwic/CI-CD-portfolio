{
  "info": {
    "name": "QA Portfolio - API Tests",
    "description": "Comprehensive API testing collection for QA portfolio demonstration",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Posts API",
      "item": [
        {
          "name": "Get All Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has posts', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Post structure is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstPost = responseJson[0];",
                  "    pm.expect(firstPost).to.have.property('userId');",
                  "    pm.expect(firstPost).to.have.property('id');",
                  "    pm.expect(firstPost).to.have.property('title');",
                  "    pm.expect(firstPost).to.have.property('body');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": ["{{baseUrl}}"],
              "path": ["posts"]
            }
          }
        },
        {
          "name": "Get Specific Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Post ID matches request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.id).to.eql(1);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts/1",
              "host": ["{{baseUrl}}"],
              "path": ["posts", "1"]
            }
          }
        },
        {
          "name": "Create New Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Post was created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.title).to.eql('QA Test Post');",
                  "    pm.expect(responseJson.body).to.eql('This is a test post created by QA automation');",
                  "    pm.expect(responseJson.userId).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"QA Test Post\",\n  \"body\": \"This is a test post created by QA automation\",\n  \"userId\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": ["{{baseUrl}}"],
              "path": ["posts"]
            }
          }
        },
        {
          "name": "Update Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Post was updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.eql('Updated QA Test Post');",
                  "    pm.expect(responseJson.body).to.eql('This post has been updated by QA automation');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"title\": \"Updated QA Test Post\",\n  \"body\": \"This post has been updated by QA automation\",\n  \"userId\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts/1",
              "host": ["{{baseUrl}}"],
              "path": ["posts", "1"]
            }
          }
        },
        {
          "name": "Delete Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts/1",
              "host": ["{{baseUrl}}"],
              "path": ["posts", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Users API",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of users', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('User structure is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstUser = responseJson[0];",
                  "    pm.expect(firstUser).to.have.property('id');",
                  "    pm.expect(firstUser).to.have.property('name');",
                  "    pm.expect(firstUser).to.have.property('username');",
                  "    pm.expect(firstUser).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Get Non-existent Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response handles error gracefully', function () {",
                  "    // Verify the API handles non-existent resources properly",
                  "    pm.expect(pm.response.code).to.eql(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts/9999",
              "host": ["{{baseUrl}}"],
              "path": ["posts", "9999"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://jsonplaceholder.typicode.com"
    }
  ]
}
